#!/usr/bin/env groovy
import groovy.transform.Field

/* Create code coverage job */
def get_code_coverage_job(platform) {
    return {
        node('mbedtls && ubuntu-16.10-x64') {
            try {
                deleteDir()
                get_docker_image(platform)
                dir('mbed-crypto') {
                    checkout_mbed_crypto()
                    writeFile file: 'steps.sh', text: '''#!/bin/sh
set -e
set -x
ulimit -f 20971520
./tests/scripts/basic-build-test.sh 2>&1
'''
                }
                timeout(time: perJobTimeout.time, unit: perJobTimeout.unit) {
                    coverage_log = sh returnStdout: true, script: """
chmod +x mbed-crypto/steps.sh
docker run -u \$(id -u):\$(id -g) --rm --entrypoint /var/lib/build/steps.sh \
-w /var/lib/build -v `pwd`/mbed-crypto:/var/lib/build \
-v /home/ubuntu/.ssh:/home/mbedjenkins/.ssh $docker_repo:$platform
"""
                }
            } catch (err) {
                failedBuilds['basic-build-test'] = true
                throw (err)
            } finally {
                echo coverage_log
                coverage_details = coverage_log.substring(
                    coverage_log.indexOf('Test Report Summary')
                )
                coverage_details = coverage_details.substring(
                    coverage_details.indexOf('Coverage')
                )
            }
        }
    }
}

def get_all_sh_job(component, platform) {
    return {
        node('ubuntu-16.10-x64 && mbedtls') {
            try {
                deleteDir()
                get_docker_image(platform)
                dir('mbed-crypto') {
                    checkout_mbed_crypto()
                    writeFile file: 'steps.sh', text: """#!/bin/sh
set -eux
ulimit -f 20971520
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
git init
git add .
git commit -m "CI code copy"
export LOG_FAILURE_ON_STDOUT=1
set ./tests/scripts/all.sh --seed 4 --keep-going $component
"\$@"
"""
                }
                timeout(time: perJobTimeout.time, unit: perJobTimeout.unit) {
                    sh """
chmod +x mbed-crypto/steps.sh
docker run -u \$(id -u):\$(id -g) --rm --entrypoint /var/lib/build/steps.sh \
-w /var/lib/build -v `pwd`/mbed-crypto:/var/lib/build \
-v /home/ubuntu/.ssh:/home/mbedjenkins/.ssh --cap-add SYS_PTRACE \
$docker_repo:$platform
"""
                }
            } catch (err) {
                failedBuilds['all.sh'] = true
                throw (err)
            }
        }
    }
}

def get_windows_tests_job(build) {
    return {
        node("windows-tls") {
            try {
                dir("mbed-crypto") {
                    deleteDir()
                    checkout([$class: 'GitSCM', branches: [[name: "**"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'CloneOption',
                                     depth: 0,
                                     honorRefspec: true,
                                     noTags: false,
                                     reference: '',
                                     shallow: false,
                                     timeout: 60,
                                     ],
                        ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: env.GIT_CREDENTIALS_ID,
                        refspec: '+refs/heads/*:refs/remotes/*',
                        url: MBED_CRYPTO_REPO]]])
                }

                dir("tools") {
                    deleteDir()
                    checkout scm
                }

                dir("logs") {
                    deleteDir()
                    writeFile file:'results.txt', text:''
                }

                dir("worktrees") {
                    deleteDir()
                    writeFile file:'worktrees.txt', text:''
                }

                timeout(time: perJobTimeout.time, unit: perJobTimeout.unit) {
                    bat "python tools/resources/windows/windows_testing.py mbed-crypto logs $MBED_CRYPTO_BRANCH -b $build"
                }
            } catch (err) {
                failedBuilds["Windows ${build} tests"] = true
                throw (err)
            }
        }
    }
}

def checkout_mbed_crypto() {
    checkout scm: [$class: 'GitSCM',
                   userRemoteConfigs: [[url: MBED_CRYPTO_REPO,
                                        credentialsId: env.GIT_CREDENTIALS_ID]],
                   branches: [[name: MBED_CRYPTO_BRANCH]],
                   extensions: [
                       [$class: 'CloneOption',
                                timeout: 60],
                   ],
                  ]
}

def checkout_mbed_os() {
    checkout scm: [$class: 'GitSCM',
                   userRemoteConfigs: [[url: MBED_OS_REPO,
                                        credentialsId: env.GIT_CREDENTIALS_ID]],
                   branches: [[name: MBED_OS_BRANCH]],
                   extensions: [
                       [$class: 'CloneOption',
                                timeout: 60,
                                shallow: true,
                                ],
                   ],
                  ]
    if (MBED_TLS_BRANCH) {
        dir('features/mbedtls/importer') {
            sh """\
set -e
ulimit -f 20971520
export MBED_TLS_RELEASE=$MBED_TLS_BRANCH
export MBED_TLS_REPO_URL=$MBED_TLS_REPO
make update
make all
"""
        }
    }
    dir('features/mbedtls/mbed-crypto/importer') {
        sh """\
set -e
ulimit -f 20971520
export CRYPTO_RELEASE=$MBED_CRYPTO_BRANCH
export CRYPTO_REPO_URL=$MBED_CRYPTO_REPO
make update
make all
"""
    }
}

def checkout_mbed_os_examples(repo, branch) {
    checkout scm: [$class: 'GitSCM',
                   userRemoteConfigs: [[url: repo,
                                        credentialsId: env.GIT_CREDENTIALS_ID]],
                   branches: [[name: branch]],
                   extensions: [
                       [$class: 'CloneOption',
                                timeout: 60],
                   ],
                  ]

}

def get_docker_image(platform) {
    sh "\$(aws ecr get-login) && docker pull $docker_repo:$platform"
}

def gen_mbed_os_example_job(repo, branch, example, compiler, platform) {
    return {
        node(compiler) {
            try {
                def use_psa_crypto = ""
                if (platforms_with_entropy_sources.contains(platform)) {
                    use_psa_crypto = "-DMBEDTLS_PSA_CRYPTO_C"
                }
                timestamps {
                    deleteDir()
                    checkout_mbed_os_examples(repo, branch)
                    dir(example) {
/* This script appears to do nothing, however it is needed in a few cases.
 * We wish to deploy specific versions of Mbed OS, TLS and Crypto, so we
 * remove mbed-os.lib to not deploy it twice. Mbed deploy is still needed in
 * case other libraries exist to be deployed. */
                        sh """\
set -e
ulimit -f 20971520
rm -f mbed-os.lib
mbed config root .
mbed deploy -vv
"""
                        dir('mbed-os') {
                            deleteDir()
                            checkout_mbed_os()
                        }
                        timeout(time: perJobTimeout.time +
                                        perJobTimeout.raasOffset,
                                unit: perJobTimeout.unit) {
                            def tag_filter = ""
                            if (example == 'atecc608a') {
                                sh './update-crypto.sh'
                                tag_filter = "--tag-filters HAS_CRYPTOKIT"
                            }
                            sh """\
set -e
ulimit -f 20971520
mbed compile -m ${platform} -t ${compiler} ${use_psa_crypto}
"""
                            def attempts = 0
                            while (true) {
                                try {
                                    sh """\
set -e
ulimit -f 20971520
if [ -e BUILD/${platform}/${compiler}/${example}.bin ]
then
    BINARY=BUILD/${platform}/${compiler}/${example}.bin
else
    if [ -e BUILD/${platform}/${compiler}/${example}.hex ]
    then
        BINARY=BUILD/${platform}/${compiler}/${example}.hex
    fi
fi

export RAAS_USERNAME=user
export RAAS_PASSWORD=user
export RAAS_PYCLIENT_FORCE_REMOTE_ALLOCATION=1
export RAAS_PYCLIENT_ALLOCATION_QUEUE_TIMEOUT=3600
mbedhtrun -m ${platform} ${tag_filter} -g raas_client:https://auli.mbedcloudtesting.com:443 -P 1000 --sync=0 -v --compare-log ../tests/${example}.log -f \$BINARY
"""
                                break
                                } catch (err) {
                                    attempts += 1
                                    if (attempts >= 3) {
                                        throw (err)
                                    }
                                }
                            }
                        }
                    }
                }
            } catch (err) {
                failedBuilds["${example}-${platform}-${compiler}"] = true
                throw (err)
            }
        }
    }
}

// Keep track of builds that fail
@Field failedBuilds = [:]

@Field coverage_details = ""

@Field compilers = ['ARM', 'GCC_ARM', 'IAR']

@Field all_platforms = [
    'K64F', 'NUCLEO_F429ZI', 'UBLOX_EVK_ODIN_W2', 'NUCLEO_F746ZG',
    'CY8CKIT_062_WIFI_BT', 'NUCLEO_F411RE'
]

@Field platforms_with_entropy_sources = [
    'K64F', 'NUCLEO_F429ZI', 'UBLOX_EVK_ODIN_W2', 'NUCLEO_F746ZG',
    'CY8CKIT_062_WIFI_BT'
]

@Field platforms_with_ethernet = [
    'K64F', 'NUCLEO_F429ZI', 'UBLOX_EVK_ODIN_W2', 'NUCLEO_F746ZG'
]

@Field docker_repo = '853142832404.dkr.ecr.eu-west-1.amazonaws.com/jenkins-mbedtls'

/*
 * This controls the timeout each job has. It does not count the time spent in
 * waiting queues and setting up the environment.
 *
 * Raas has its own resource queue with the timeout of 1000s, we need to take
 * it into account for the on-target test jobs.
 */
@Field perJobTimeout = [time: 45, raasOffset: 17, unit: 'MINUTES']

/* main job */
node {

    examples = [
        'authcrypt': [
            'should_run': TEST_MBED_OS_TLS_EXAMPLES,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': platforms_with_entropy_sources,
            'compilers': compilers],
        'benchmark': [
            'should_run': TEST_MBED_OS_TLS_EXAMPLES,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': platforms_with_entropy_sources,
            'compilers': compilers],
        'hashing': [
            'should_run': TEST_MBED_OS_TLS_EXAMPLES,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': all_platforms,
            'compilers': compilers],
        'tls-client': [
            'should_run': TEST_MBED_OS_TLS_EXAMPLES,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': platforms_with_ethernet,
            'compilers': compilers],
        'mbed-crypto': [
            'should_run': TEST_MBED_OS_CRYPTO_EXAMPLES,
            'repo': MBED_OS_CRYPTO_EXAMPLES_REPO,
            'branch': MBED_OS_CRYPTO_EXAMPLES_BRANCH,
            'platforms': platforms_with_entropy_sources,
            'compilers': compilers],
        'atecc608a': [
            'should_run': TEST_MBED_OS_ATECC608A_EXAMPLES,
            'repo': MBED_OS_ATECC608A_EXAMPLES_REPO,
            'branch': MBED_OS_ATECC608A_EXAMPLES_BRANCH,
            'platforms': ['K64F'],
            'compilers': ['GCC_ARM']],
    ]

    parallel_jobs = [:]
    platform = 'ubuntu-16.04'

    if (RUN_BASIC_BUILD_TEST == "true") {
        parallel_jobs['code_coverage'] = get_code_coverage_job(platform);
    }

    if (RUN_ALL == "true") {
        dir('mbed-crypto') {
            deleteDir()
            checkout_mbed_crypto()
            all_sh_help = sh(
                script: "./tests/scripts/all.sh --help",
                returnStdout: true
            )
            if (all_sh_help.contains('list-components')) {
                components = sh(
                    script: "./tests/scripts/all.sh --list-components",
                    returnStdout: true
                ).trim().split('\n')
            } else {
                components = [""]
            }
        }
        for (component in components) {
            parallel_jobs["all_sh-${platform}-${component}"] = get_all_sh_job(
                component, platform
            );
        }
        parallel_jobs["all_sh-ubuntu-18.04-build_mingw"] = get_all_sh_job(
            'build_mingw', 'ubuntu-18.04'
        );
    }

    if (RUN_WINDOWS_TEST == "true") {
        for (build in ['mingw', '2010', '2013', '2015', '2017']) {
            parallel_jobs["Windows-${build}"] = get_windows_tests_job(build);
        }

        parallel_jobs['iar8-mingw'] = {
            node("windows-tls") {
                try {
                    dir("mbed-crypto") {
                        deleteDir()
                        checkout_mbed_crypto()
                        timeout(time: perJobTimeout.time, unit: perJobTimeout.unit) {
                            bat """
perl scripts/config.pl baremetal
cmake -D CMAKE_BUILD_TYPE:String=Check -DCMAKE_C_COMPILER="iccarm" -G "MinGW Makefiles" .
mingw32-make lib
"""
                        }
                    }
                } catch (err) {
                    failedBuilds['iar8-mingw'] = true
                    throw (err)
                }
            }
        }
    }

    /* Mbed OS Example job generation */
    examples.each { example ->
        if (example.value['should_run'] == 'true') {
            for (compiler in example.value['compilers']) {
                for (platform in example.value['platforms']) {
                    parallel_jobs["${example.key}-${platform}-${compiler}"] =
                        gen_mbed_os_example_job(
                            example.value['repo'],
                            example.value['branch'],
                            example.key, compiler, platform
                        )
                }
            }
        }
    }

    parallel_jobs.failFast = false
    try {
        parallel parallel_jobs
    } finally {
        if (currentBuild.rawBuild.getCauses()[0].toString().contains('TimerTriggerCause')) {
            if (failedBuilds.size() == 0) {
                emailbody = """
${coverage_details}

Logs: ${env.BUILD_URL}
"""
                subject = "Mbed Crypto nightly test passed!"
                recipients = "jaeden.amero@arm.com; oliver.harper@arm.com"
            } else {
                keys = failedBuilds.keySet()
                failures = keys.join(", ")
                emailbody = """
${coverage_details}

Logs: ${env.BUILD_URL}

Failures: ${failures}
"""
                subject = "Mbed Crypto nightly test failed!"
                recipients = 'mbed-crypto-eng@arm.com'
            }
            echo subject
            echo emailbody
            emailext body: emailbody,
                     subject: subject,
                     to: recipients,
                     mimeType: 'text/plain'
        }
    }
}
