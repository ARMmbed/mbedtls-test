#!/usr/bin/env groovy
import groovy.transform.Field

def gen_mbed_os_example_job(repo, branch, example, compiler, platform) {
    return {
        node(compiler) {
            try {
                def use_psa_crypto = ""
                if (platforms_with_entropy_sources.contains(platform)) {
                    use_psa_crypto = "-DMBEDTLS_PSA_CRYPTO_C"
                }
                timestamps {
                    deleteDir()
                    checkout_repo.checkout_parametrized_repo(repo, branch)
                    dir(example) {
/* This script appears to do nothing, however it is needed in a few cases.
 * We wish to deploy specific versions of Mbed OS, TLS and Crypto, so we
 * remove mbed-os.lib to not deploy it twice. Mbed deploy is still needed in
 * case other libraries exist to be deployed. */
                        sh """\
set -e
ulimit -f 20971520
rm -f mbed-os.lib
mbed config root .
mbed deploy -vv
"""
                        dir('mbed-os') {
                            deleteDir()
                            checkout_repo.checkout_mbed_os()
                        }
                        timeout(time: common.perJobTimeout.time +
                                      common.perJobTimeout.raasOffset,
                                unit: common.perJobTimeout.unit) {
                            def tag_filter = ""
                            if (example == 'atecc608a') {
                                sh './update-crypto.sh'
                                tag_filter = "--tag-filters HAS_CRYPTOKIT"
                            }
                            sh """\
set -e
ulimit -f 20971520
mbed compile -m ${platform} -t ${compiler} ${use_psa_crypto}
"""
                            def attempts = 0
                            while (true) {
                                try {
                                    sh """\
set -e
ulimit -f 20971520
if [ -e BUILD/${platform}/${compiler}/${example}.bin ]
then
    BINARY=BUILD/${platform}/${compiler}/${example}.bin
else
    if [ -e BUILD/${platform}/${compiler}/${example}.hex ]
    then
        BINARY=BUILD/${platform}/${compiler}/${example}.hex
    fi
fi

export RAAS_PYCLIENT_FORCE_REMOTE_ALLOCATION=1
export RAAS_PYCLIENT_ALLOCATION_QUEUE_TIMEOUT=3600
mbedhtrun -m ${platform} ${tag_filter} -g raas_client:https://auli.mbedcloudtesting.com:443 -P 1000 --sync=0 -v --compare-log ../tests/${example}.log -f \$BINARY
"""
                                break
                                } catch (err) {
                                    attempts += 1
                                    if (attempts >= 3) {
                                        throw (err)
                                    }
                                }
                            }
                        }
                    }
                }
            } catch (err) {
                failedBuilds["${example}-${platform}-${compiler}"] = true
                throw (err)
            }
        }
    }
}

// Keep track of builds that fail
@Field failedBuilds = [:]

@Field compilers = ['ARM', 'GCC_ARM', 'IAR']

@Field all_platforms = [
    'K64F', 'NUCLEO_F429ZI', 'UBLOX_EVK_ODIN_W2', 'NUCLEO_F746ZG',
    'CY8CKIT_062_WIFI_BT', 'NUCLEO_F411RE'
]

@Field platforms_with_entropy_sources = [
    'K64F', 'NUCLEO_F429ZI', 'UBLOX_EVK_ODIN_W2', 'NUCLEO_F746ZG',
    'CY8CKIT_062_WIFI_BT'
]

@Field platforms_with_ethernet = [
    'K64F', 'NUCLEO_F429ZI', 'UBLOX_EVK_ODIN_W2', 'NUCLEO_F746ZG'
]

@Field docker_repo = '853142832404.dkr.ecr.eu-west-1.amazonaws.com/jenkins-mbedtls'

/* main job */
node {
    library identifier: 'mbedtls-test@master', retriever: legacySCM(scm)
    environ.set_crypto_release_environment()

    examples = [
        'authcrypt': [
            'should_run': TEST_MBED_OS_TLS_EXAMPLES,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': platforms_with_entropy_sources,
            'compilers': compilers],
        'benchmark': [
            'should_run': TEST_MBED_OS_TLS_EXAMPLES,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': platforms_with_entropy_sources,
            'compilers': compilers],
        'hashing': [
            'should_run': TEST_MBED_OS_TLS_EXAMPLES,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': all_platforms,
            'compilers': compilers],
        'tls-client': [
            'should_run': TEST_MBED_OS_TLS_EXAMPLES,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': platforms_with_ethernet,
            'compilers': compilers],
        'mbed-crypto': [
            'should_run': TEST_MBED_OS_CRYPTO_EXAMPLES,
            'repo': MBED_OS_CRYPTO_EXAMPLES_REPO,
            'branch': MBED_OS_CRYPTO_EXAMPLES_BRANCH,
            'platforms': platforms_with_entropy_sources,
            'compilers': compilers],
        'atecc608a': [
            'should_run': TEST_MBED_OS_ATECC608A_EXAMPLES,
            'repo': MBED_OS_ATECC608A_EXAMPLES_REPO,
            'branch': MBED_OS_ATECC608A_EXAMPLES_BRANCH,
            'platforms': ['K64F'],
            'compilers': ['GCC_ARM']],
    ]

    jobs = [:]
    platform = 'ubuntu-16.04'

    if (RUN_BASIC_BUILD_TEST == "true") {
        jobs = jobs + gen_jobs.gen_code_coverage_job(platform);
    }

    if (RUN_ALL == "true") {
        all_sh_components = common.get_all_sh_components()
        for (component in all_sh_components) {
            jobs = jobs + gen_jobs.gen_all_sh_jobs('ubuntu-16.04', component)
        }
        jobs = jobs + gen_jobs.gen_all_sh_jobs('ubuntu-18.04', 'build_mingw')
    }

    if (RUN_WINDOWS_TEST == "true") {
        for (build in ['mingw', '2010', '2013', '2015', '2017']) {
            jobs = jobs + gen_jobs.gen_windows_tests_jobs(build)
        }

        jobs['iar8-mingw'] = {
            node("windows-tls") {
                try {
                    dir("mbed-crypto") {
                        deleteDir()
                        checkout_repo.checkout_repo()
                        timeout(time: common.perJobTimeout.time,
                                unit: common.perJobTimeout.unit) {
                            bat """
perl scripts/config.pl baremetal
cmake -D CMAKE_BUILD_TYPE:String=Check -DCMAKE_C_COMPILER="iccarm" -G "MinGW Makefiles" .
mingw32-make lib
"""
                        }
                    }
                } catch (err) {
                    failedBuilds['iar8-mingw'] = true
                    throw (err)
                }
            }
        }
    }

    /* Mbed OS Example job generation */
    examples.each { example ->
        if (example.value['should_run'] == 'true') {
            for (compiler in example.value['compilers']) {
                for (platform in example.value['platforms']) {
                    jobs["${example.key}-${platform}-${compiler}"] =
                        gen_mbed_os_example_job(
                            example.value['repo'],
                            example.value['branch'],
                            example.key, compiler, platform
                        )
                }
            }
        }
    }

    jobs.failFast = false
    try {
        parallel jobs
    } finally {
        if (currentBuild.rawBuild.getCauses()[0].toString().contains('TimerTriggerCause')) {
            if (gen_jobs.failed_builds.size() == 0) {
                emailbody = """
${gen_jobs.coverage_details}

Logs: ${env.BUILD_URL}
"""
                subject = "Mbed Crypto nightly test passed!"
                recipients = "jaeden.amero@arm.com; oliver.harper@arm.com"
            } else {
                keys = gen_jobs.failed_builds.keySet()
                failures = keys.join(", ")
                emailbody = """
${gen_jobs.coverage_details}

Logs: ${env.BUILD_URL}

Failures: ${failures}
"""
                subject = "Mbed Crypto nightly test failed!"
                recipients = 'mbed-crypto-eng@arm.com'
            }
            echo subject
            echo emailbody
            emailext body: emailbody,
                     subject: subject,
                     to: recipients,
                     mimeType: 'text/plain'
        }
    }
}
