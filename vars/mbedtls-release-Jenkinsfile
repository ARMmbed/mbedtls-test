#!/usr/bin/env groovy
import groovy.transform.Field

/*
 * This script takes the following parameters:
 *
 * Repos and branches
 *  - MBED_TLS_REPO
 *  - MBED_TLS_BRANCH
 *  - MBED_CRYPTO_REPO - optional
 *  - MBED_CRYPTO_BRANCH - optional
 *  - MBED_OS_REPO
 *  - MBED_OS_BRANCH
 *  - MBED_OS_TLS_EXAMPLES_REPO
 *  - MBED_OS_TLS_EXAMPLES_BRANCH
 *
 * Test options
 *  - RUN_BASIC_BUILD_TEST
 *  - RUN_ALL
 *  - RUN_WINDOWS_TEST
 *  - TEST_MBED_OS_AUTHCRYPT_EXAMPLE
 *  - TEST_MBED_OS_BENCHMARK_EXAMPLE
 *  - TEST_MBED_OS_HASHING_EXAMPLE
 *  - TEST_MBED_OS_TLS_CLIENT_EXAMPLE
 *
 * Environment variables:
 *  - GIT_CREDENTIALS_ID
 *  - TEST_FAIL_EMAIL_ADDRESS - (used for scheduled jobs)
 *  - TEST_PASS_EMAIL_ADDRESS - (used for scheduled jobs)
 */

// Keep track of builds that fail
@Field failedBuilds = [:]

@Field docker_repo = '853142832404.dkr.ecr.eu-west-1.amazonaws.com/jenkins-mbedtls'

/* main job */
node {
    library identifier: 'mbedtls-test@master', retriever: legacySCM(scm)
    environ.set_tls_release_environment()

    jobs = [:]
    platform = 'ubuntu-16.04'

    if (RUN_BASIC_BUILD_TEST == "true") {
        jobs = jobs + gen_jobs.gen_code_coverage_job(platform);
    }

    if (RUN_ALL == "true") {
        all_sh_components = common.get_all_sh_components()
        for (component in all_sh_components) {
            jobs = jobs + gen_jobs.gen_all_sh_jobs('ubuntu-16.04', component)
        }
        jobs = jobs + gen_jobs.gen_all_sh_jobs('ubuntu-18.04', 'build_mingw')
    }

    if (RUN_WINDOWS_TEST == "true") {
        for (build in ['mingw', '2010', '2013', '2015', '2017']) {
            jobs = jobs + gen_jobs.gen_windows_tests_jobs(build)
        }
    }

    /* Run the IAR Compiler job unconditionally */
    jobs['iar8-mingw'] = {
        node("windows-tls") {
            try {
                dir("mbedtls") {
                    deleteDir()
                    checkout_repo.checkout_repo()
                    timeout(time: common.perJobTimeout.time,
                            unit: common.perJobTimeout.unit) {
                        bat """
perl scripts/config.pl baremetal
cmake -D CMAKE_BUILD_TYPE:String=Check -DCMAKE_C_COMPILER="iccarm" -G "MinGW Makefiles" .
mingw32-make lib
"""
                    }
                }
            } catch (err) {
                failedBuilds['iar8-mingw'] = true
                throw (err)
            }
        }
    }

/* Mbed OS Example job generation */
    common.examples.each { example ->
        if (example.value['should_run'] == 'true') {
            for (compiler in example.value['compilers']) {
                for (platform in example.value['platforms']) {
                    jobs = jobs + gen_jobs.gen_mbed_os_example_job(
                        example.value['repo'],
                        example.value['branch'],
                        example.key, compiler, platform
                    )
                }
            }
        }
    }

    jobs.failFast = false
    try {
        parallel jobs
    } finally {
        if (currentBuild.rawBuild.getCauses()[0].toString().contains('TimerTriggerCause')) {
            if (gen_jobs.failed_builds.size() == 0) {
                emailbody = """
${gen_jobs.coverage_details}

Logs: ${env.BUILD_URL}
"""
                subject = "Mbed TLS nightly test passed!"
                recipients = env.TEST_PASS_EMAIL_ADDRESS
            } else {
                keys = gen_jobs.failed_builds.keySet()
                failures = keys.join(", ")
                emailbody = """
${gen_jobs.coverage_details}

Logs: ${env.BUILD_URL}

Failures: ${failures}
"""
                subject = "Mbed TLS nightly test failed!"
                recipients = env.TEST_FAIL_EMAIL_ADDRESS
            }
            echo subject
            echo emailbody
            emailext body: emailbody,
                     subject: subject,
                     to: recipients,
                     mimeType: 'text/plain'
        }
    }
}
