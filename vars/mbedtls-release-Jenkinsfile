#!/usr/bin/env groovy
import groovy.transform.Field

/*
 * This script takes the following parameters:
 *
 * Repos and branches
 *  - MBED_TLS_REPO
 *  - MBED_TLS_BRANCH
 *  - MBED_CRYPTO_REPO - optional
 *  - MBED_CRYPTO_BRANCH - optional
 *  - MBED_OS_REPO
 *  - MBED_OS_BRANCH
 *  - MBED_OS_TLS_EXAMPLES_REPO
 *  - MBED_OS_TLS_EXAMPLES_BRANCH
 *
 * Test options
 *  - RUN_BASIC_BUILD_TEST
 *  - RUN_ALL
 *  - RUN_WINDOWS_TEST
 *  - TEST_MBED_OS_AUTHCRYPT_EXAMPLE
 *  - TEST_MBED_OS_BENCHMARK_EXAMPLE
 *  - TEST_MBED_OS_HASHING_EXAMPLE
 *  - TEST_MBED_OS_TLS_CLIENT_EXAMPLE
 *
 * Environment variables:
 *  - GIT_CREDENTIALS_ID
 *  - TEST_FAIL_EMAIL_ADDRESS - (used for scheduled jobs)
 *  - TEST_PASS_EMAIL_ADDRESS - (used for scheduled jobs)
 */


/* Create code coverage job */
def get_code_coverage_job(platform) {
    return {
        node('mbedtls && ubuntu-16.10-x64') {
            try {
                deleteDir()
                common.get_docker_image(platform)
                dir('mbedtls') {
                    checkout_repo.checkout_repo()
                    writeFile file: 'steps.sh', text: '''#!/bin/sh
set -e
set -x
ulimit -f 20971520
./tests/scripts/basic-build-test.sh 2>&1
'''
                }
                timeout(time: common.perJobTimeout.time,
                        unit: common.perJobTimeout.unit) {
                    coverage_log = sh returnStdout: true, script: """
chmod +x mbedtls/steps.sh
docker run -u \$(id -u):\$(id -g) --rm --entrypoint /var/lib/build/steps.sh \
-w /var/lib/build -v `pwd`/mbedtls:/var/lib/build \
-v /home/ubuntu/.ssh:/home/mbedjenkins/.ssh $docker_repo:$platform
"""
                }
            } catch (err) {
                failedBuilds['basic-build-test'] = true
                throw (err)
            } finally {
                echo coverage_log
                coverage_details = coverage_log.substring(
                    coverage_log.indexOf('Test Report Summary')
                )
                coverage_details = coverage_details.substring(
                    coverage_details.indexOf('Coverage')
                )
            }
        }
    }
}

def get_all_sh_job(component, platform) {
    return {
        node('ubuntu-16.10-x64 && mbedtls') {
            try {
                deleteDir()
                common.get_docker_image(platform)
                dir('mbedtls') {
                    checkout_repo.checkout_repo()
                    writeFile file: 'steps.sh', text: """#!/bin/sh
set -eux
ulimit -f 20971520
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
git init
git add .
git commit -m "CI code copy"
export LOG_FAILURE_ON_STDOUT=1
set ./tests/scripts/all.sh -m  --release-test --keep-going $component
"\$@"
"""
                }
                timeout(time: common.perJobTimeout.time,
                        unit: common.perJobTimeout.unit) {
                    sh """
chmod +x mbedtls/steps.sh
docker run -u \$(id -u):\$(id -g) --rm --entrypoint /var/lib/build/steps.sh \
-w /var/lib/build -v `pwd`/mbedtls:/var/lib/build \
-v /home/ubuntu/.ssh:/home/mbedjenkins/.ssh --cap-add SYS_PTRACE \
$docker_repo:$platform
"""
                }
            } catch (err) {
                failedBuilds['all.sh'] = true
                throw (err)
            }
        }
    }
}

def gen_mbed_os_example_job(repo, branch, example, compiler, platform) {
    return {
        node(compiler) {
            try {
                timestamps {
                    deleteDir()
                    checkout_repo.checkout_parametrized_repo(repo, branch)
                    dir(example) {
/* This script appears to do nothing, however it is needed in a few cases.
 * We wish to deploy specific versions of Mbed OS, TLS and Crypto, so we
 * remove mbed-os.lib to not deploy it twice. Mbed deploy is still needed in
 * case other libraries exist to be deployed. */
                        sh """\
set -e
ulimit -f 20971520
rm -f mbed-os.lib
mbed config root .
mbed deploy -vv
"""
                        dir('mbed-os') {
                            deleteDir()
                            checkout_repo.checkout_mbed_os()
                        }
                        timeout(time: common.perJobTimeout.time +
                                      common.perJobTimeout.raasOffset,
                                unit: common.perJobTimeout.unit) {
                            sh """\
set -e
ulimit -f 20971520
mbed compile -m ${platform} -t ${compiler}
"""
                            def attempts = 0
                            while (true) {
                                try {
                                    sh """\
set -e
ulimit -f 20971520
if [ -e BUILD/${platform}/${compiler}/${example}.bin ]
then
    BINARY=BUILD/${platform}/${compiler}/${example}.bin
else
    if [ -e BUILD/${platform}/${compiler}/${example}.hex ]
    then
        BINARY=BUILD/${platform}/${compiler}/${example}.hex
    fi
fi

export RAAS_PYCLIENT_FORCE_REMOTE_ALLOCATION=1
export RAAS_PYCLIENT_ALLOCATION_QUEUE_TIMEOUT=3600
mbedhtrun -m ${platform} -g raas_client:https://auli.mbedcloudtesting.com:443 -P 1000 --sync=0 -v --compare-log ../tests/${example}.log -f \$BINARY
"""
                                break
                                } catch (err) {
                                    attempts += 1
                                    if (attempts >= 3) {
                                        throw (err)
                                    }
                                }
                            }
                        }
                    }
                }
            } catch (err) {
                failedBuilds["${example}-${platform}-${compiler}"] = true
                throw (err)
            }
        }
    }
}

// Keep track of builds that fail
@Field failedBuilds = [:]

@Field coverage_details = ""

@Field compilers = ['ARM', 'GCC_ARM', 'IAR']

@Field all_platforms = ['K64F', 'NUCLEO_F429ZI', 'UBLOX_EVK_ODIN_W2',
                    'NUCLEO_F746ZG', 'CY8CKIT_062_WIFI_BT']

@Field platforms_with_ethernet = [
    'K64F', 'NUCLEO_F429ZI', 'UBLOX_EVK_ODIN_W2', 'NUCLEO_F746ZG'
]

@Field docker_repo = '853142832404.dkr.ecr.eu-west-1.amazonaws.com/jenkins-mbedtls'

/* main job */
node {
    library identifier: 'mbedtls-test@master', retriever: legacySCM(scm)
    environ.set_tls_release_environment()

    examples = [
        'authcrypt': [
            'should_run': TEST_MBED_OS_AUTHCRYPT_EXAMPLE,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': all_platforms,
            'compilers': compilers],
        'benchmark': [
            'should_run': TEST_MBED_OS_BENCHMARK_EXAMPLE,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': all_platforms,
            'compilers': compilers],
        'hashing': [
            'should_run': TEST_MBED_OS_HASHING_EXAMPLE,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': all_platforms,
            'compilers': compilers],
        'tls-client': [
            'should_run': TEST_MBED_OS_TLS_CLIENT_EXAMPLE,
            'repo': MBED_OS_TLS_EXAMPLES_REPO,
            'branch': MBED_OS_TLS_EXAMPLES_BRANCH,
            'platforms': platforms_with_ethernet,
            'compilers': compilers],
    ]

    jobs = [:]
    platform = 'ubuntu-16.04'

    if (RUN_BASIC_BUILD_TEST == "true") {
        jobs['code_coverage'] = get_code_coverage_job(platform);
    }

    if (RUN_ALL == "true") {
        dir('mbedtls') {
            deleteDir()
            checkout_repo.checkout_repo()
            all_sh_help = sh(
                script: "./tests/scripts/all.sh --help",
                returnStdout: true
            )
            if (all_sh_help.contains('list-components')) {
                components = sh(
                    script: "./tests/scripts/all.sh --list-components",
                    returnStdout: true
                ).trim().split('\n')
            } else {
                components = [""]
            }
        }
        for (component in components) {
            jobs["all_sh-${platform}-${component}"] = get_all_sh_job(
                component, platform
            );
        }
        jobs["all_sh-ubuntu-18.04-build_mingw"] = get_all_sh_job(
            'build_mingw', 'ubuntu-18.04'
        );
    }

    if (RUN_WINDOWS_TEST == "true") {
        for (build in ['mingw', '2010', '2013', '2015', '2017']) {
            jobs = jobs + gen_jobs.gen_windows_tests_jobs(build)
        }
    }

    /* Run the IAR Compiler job unconditionally */
    jobs['iar8-mingw'] = {
        node("windows-tls") {
            try {
                dir("mbedtls") {
                    deleteDir()
                    checkout_repo.checkout_repo()
                    timeout(time: common.perJobTimeout.time,
                            unit: common.perJobTimeout.unit) {
                        bat """
perl scripts/config.pl baremetal
cmake -D CMAKE_BUILD_TYPE:String=Check -DCMAKE_C_COMPILER="iccarm" -G "MinGW Makefiles" .
mingw32-make lib
"""
                    }
                }
            } catch (err) {
                failedBuilds['iar8-mingw'] = true
                throw (err)
            }
        }
    }

/* Mbed OS Example job generation */
    examples.each { example ->
        if (example.value['should_run'] == 'true') {
            for (compiler in example.value['compilers']) {
                for (platform in example.value['platforms']) {
                    jobs["${example.key}-${platform}-${compiler}"] =
                        gen_mbed_os_example_job(
                            example.value['repo'],
                            example.value['branch'],
                            example.key, compiler, platform
                        )
                }
            }
        }
    }

    jobs.failFast = false
    try {
        parallel jobs
    } finally {
        if (currentBuild.rawBuild.getCauses()[0].toString().contains('TimerTriggerCause')) {
            if (gen_jobs.failed_builds.size() == 0) {
                emailbody = """
${coverage_details}

Logs: ${env.BUILD_URL}
"""
                subject = "Mbed TLS nightly test passed!"
                recipients = env.TEST_PASS_EMAIL_ADDRESS
            } else {
                keys = gen_jobs.failed_builds.keySet()
                failures = keys.join(", ")
                emailbody = """
${coverage_details}

Logs: ${env.BUILD_URL}

Failures: ${failures}
"""
                subject = "Mbed TLS nightly test failed!"
                recipients = env.TEST_FAIL_EMAIL_ADDRESS
            }
            echo subject
            echo emailbody
            emailext body: emailbody,
                     subject: subject,
                     to: recipients,
                     mimeType: 'text/plain'
        }
    }
}
